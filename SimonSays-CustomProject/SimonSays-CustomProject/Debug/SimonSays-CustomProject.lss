
SimonSays-CustomProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00000c02  00000c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008001e0  008001e0  00000d76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013eb  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aca  00000000  00000000  000022d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa8  00000000  00000000  00002d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000691  00000000  00000000  00003a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050a  00000000  00000000  000040fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	df c0       	rjmp	.+446    	; 0x1f4 <__vector_13>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f 02       	muls	r24, r31
  8e:	b1 02       	muls	r27, r17
  90:	d1 02       	muls	r29, r17
  92:	df 02       	muls	r29, r31
  94:	86 03       	fmuls	r16, r22
  96:	98 03       	fmulsu	r17, r16
  98:	63 03       	mulsu	r22, r19
  9a:	40 03       	mulsu	r20, r16
  9c:	06 03       	mulsu	r16, r22

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	e2 e0       	ldi	r30, 0x02	; 2
  b2:	fc e0       	ldi	r31, 0x0C	; 12
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a0 3e       	cpi	r26, 0xE0	; 224
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	22 e0       	ldi	r18, 0x02	; 2
  c6:	a0 ee       	ldi	r26, 0xE0	; 224
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	aa 30       	cpi	r26, 0x0A	; 10
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	e6 d3       	rcall	.+1996   	; 0x8a2 <main>
  d6:	93 c5       	rjmp	.+2854   	; 0xbfe <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  da:	18 16       	cp	r1, r24
  dc:	19 06       	cpc	r1, r25
  de:	5c f0       	brlt	.+22     	; 0xf6 <delay_ms+0x1c>
  e0:	08 95       	ret
	for(j=0;j<775;j++)
	{
		asm("nop");
  e2:	00 00       	nop
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
  e8:	e1 f7       	brne	.-8      	; 0xe2 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
  ea:	4f 5f       	subi	r20, 0xFF	; 255
  ec:	5f 4f       	sbci	r21, 0xFF	; 255
  ee:	84 17       	cp	r24, r20
  f0:	95 07       	cpc	r25, r21
  f2:	19 f4       	brne	.+6      	; 0xfa <delay_ms+0x20>
  f4:	08 95       	ret
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	50 e0       	ldi	r21, 0x00	; 0
	}
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
  fa:	27 e0       	ldi	r18, 0x07	; 7
  fc:	33 e0       	ldi	r19, 0x03	; 3
  fe:	f1 cf       	rjmp	.-30     	; 0xe2 <delay_ms+0x8>

00000100 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 100:	5e 98       	cbi	0x0b, 6	; 11
	DATA_BUS = Command;
 102:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 104:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 106:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 108:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	e5 cf       	rjmp	.-54     	; 0xda <delay_ms>
 110:	08 95       	ret

00000112 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	f5 cf       	rjmp	.-22     	; 0x100 <LCD_WriteCommand>
 116:	08 95       	ret

00000118 <LCD_Cursor>:
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
 118:	81 31       	cpi	r24, 0x11	; 17
 11a:	18 f4       	brcc	.+6      	; 0x122 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
 11c:	81 58       	subi	r24, 0x81	; 129
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>
 120:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 122:	81 55       	subi	r24, 0x51	; 81
 124:	ed cf       	rjmp	.-38     	; 0x100 <LCD_WriteCommand>
 126:	08 95       	ret

00000128 <LCD_init>:
}

void LCD_init(void) {

	//wait for 100 ms.
	delay_ms(100);
 128:	84 e6       	ldi	r24, 0x64	; 100
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	d6 df       	rcall	.-84     	; 0xda <delay_ms>
	LCD_WriteCommand(0x38);
 12e:	88 e3       	ldi	r24, 0x38	; 56
 130:	e7 df       	rcall	.-50     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	e5 df       	rcall	.-54     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	e3 df       	rcall	.-58     	; 0x100 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	e1 df       	rcall	.-62     	; 0x100 <LCD_WriteCommand>
	delay_ms(10);
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	cb cf       	rjmp	.-106    	; 0xda <delay_ms>
 144:	08 95       	ret

00000146 <LCD_WriteData>:
 146:	5e 9a       	sbi	0x0b, 6	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 148:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 14a:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 14c:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 14e:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	c2 cf       	rjmp	.-124    	; 0xda <delay_ms>
 156:	08 95       	ret

00000158 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	18 2f       	mov	r17, r24
 162:	eb 01       	movw	r28, r22
	LCD_ClearScreen();
 164:	d6 df       	rcall	.-84     	; 0x112 <LCD_ClearScreen>
	unsigned char c = column;
	while(*string) {
 166:	88 81       	ld	r24, Y
 168:	88 23       	and	r24, r24
 16a:	51 f0       	breq	.+20     	; 0x180 <LCD_DisplayString+0x28>
		LCD_Cursor(c++);
 16c:	01 e0       	ldi	r16, 0x01	; 1
 16e:	01 0f       	add	r16, r17
 170:	81 2f       	mov	r24, r17
 172:	d2 df       	rcall	.-92     	; 0x118 <LCD_Cursor>
		LCD_WriteData(*string++);
 174:	89 91       	ld	r24, Y+
 176:	e7 df       	rcall	.-50     	; 0x146 <LCD_WriteData>
 178:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 17a:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 17c:	81 11       	cpse	r24, r1
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <LCD_DisplayString+0x14>
 180:	df 91       	pop	r29
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <TimerSet>:
 18a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
	set_PWM(0);
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
 18e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 192:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 196:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 19a:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <_avr_timer_cntcurr>
 19e:	70 93 f4 01 	sts	0x01F4, r23	; 0x8001f4 <_avr_timer_cntcurr+0x1>
 1a2:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_avr_timer_cntcurr+0x2>
 1a6:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_avr_timer_cntcurr+0x3>
 1aa:	08 95       	ret

000001ac <TimerOn>:
 1ac:	8b e0       	ldi	r24, 0x0B	; 11
 1ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b2:	8d e7       	ldi	r24, 0x7D	; 125
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1d4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1d8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1dc:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <_avr_timer_cntcurr>
 1e0:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <_avr_timer_cntcurr+0x1>
 1e4:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <_avr_timer_cntcurr+0x2>
 1e8:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <_avr_timer_cntcurr+0x3>
 1ec:	8f b7       	in	r24, 0x3f	; 63
 1ee:	80 68       	ori	r24, 0x80	; 128
 1f0:	8f bf       	out	0x3f, r24	; 63
 1f2:	08 95       	ret

000001f4 <__vector_13>:
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <_avr_timer_cntcurr>
 20a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <_avr_timer_cntcurr+0x1>
 20e:	a0 91 f5 01 	lds	r26, 0x01F5	; 0x8001f5 <_avr_timer_cntcurr+0x2>
 212:	b0 91 f6 01 	lds	r27, 0x01F6	; 0x8001f6 <_avr_timer_cntcurr+0x3>
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	a1 09       	sbc	r26, r1
 21a:	b1 09       	sbc	r27, r1
 21c:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <_avr_timer_cntcurr>
 220:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <_avr_timer_cntcurr+0x1>
 224:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <_avr_timer_cntcurr+0x2>
 228:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <_avr_timer_cntcurr+0x3>
 22c:	89 2b       	or	r24, r25
 22e:	8a 2b       	or	r24, r26
 230:	8b 2b       	or	r24, r27
 232:	99 f4       	brne	.+38     	; 0x25a <__vector_13+0x66>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <TimerFlag>
 23a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 23e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 242:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 246:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 24a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <_avr_timer_cntcurr>
 24e:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <_avr_timer_cntcurr+0x1>
 252:	a0 93 f5 01 	sts	0x01F5, r26	; 0x8001f5 <_avr_timer_cntcurr+0x2>
 256:	b0 93 f6 01 	sts	0x01F6, r27	; 0x8001f6 <_avr_timer_cntcurr+0x3>
 25a:	bf 91       	pop	r27
 25c:	af 91       	pop	r26
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <xorshift8>:
 26c:	fc 01       	movw	r30, r24
 26e:	90 81       	ld	r25, Z
 270:	80 e8       	ldi	r24, 0x80	; 128
 272:	98 9f       	mul	r25, r24
 274:	90 01       	movw	r18, r0
 276:	11 24       	eor	r1, r1
 278:	92 27       	eor	r25, r18
 27a:	29 2f       	mov	r18, r25
 27c:	22 95       	swap	r18
 27e:	26 95       	lsr	r18
 280:	27 70       	andi	r18, 0x07	; 7
 282:	92 27       	eor	r25, r18
 284:	89 2f       	mov	r24, r25
 286:	88 0f       	add	r24, r24
 288:	88 0f       	add	r24, r24
 28a:	88 0f       	add	r24, r24
 28c:	89 27       	eor	r24, r25
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <getRandomNumber>:
 292:	8b ef       	ldi	r24, 0xFB	; 251
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	ea cf       	rjmp	.-44     	; 0x26c <xorshift8>
 298:	08 95       	ret

0000029a <getRandomLed>:
 29a:	fb df       	rcall	.-10     	; 0x292 <getRandomNumber>
 29c:	83 70       	andi	r24, 0x03	; 3
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <getRandomLed+0xa>
 2a2:	99 0f       	add	r25, r25
 2a4:	8a 95       	dec	r24
 2a6:	ea f7       	brpl	.-6      	; 0x2a2 <getRandomLed+0x8>
 2a8:	89 2f       	mov	r24, r25
 2aa:	08 95       	ret

000002ac <set_PWM>:
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	6b 01       	movw	r12, r22
 2b6:	7c 01       	movw	r14, r24
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <__data_end>
 2c0:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <__data_end+0x1>
 2c4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end+0x2>
 2c8:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <__data_end+0x3>
 2cc:	16 d3       	rcall	.+1580   	; 0x8fa <__cmpsf2>
 2ce:	88 23       	and	r24, r24
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <set_PWM+0x28>
 2d2:	52 c0       	rjmp	.+164    	; 0x378 <set_PWM+0xcc>
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	a9 01       	movw	r20, r18
 2da:	c7 01       	movw	r24, r14
 2dc:	b6 01       	movw	r22, r12
 2de:	0d d3       	rcall	.+1562   	; 0x8fa <__cmpsf2>
 2e0:	81 11       	cpse	r24, r1
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <set_PWM+0x44>
 2e4:	e1 e9       	ldi	r30, 0x91	; 145
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	88 70       	andi	r24, 0x08	; 8
 2ec:	80 83       	st	Z, r24
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <set_PWM+0x4e>
 2f0:	e1 e9       	ldi	r30, 0x91	; 145
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	83 60       	ori	r24, 0x03	; 3
 2f8:	80 83       	st	Z, r24
 2fa:	28 e5       	ldi	r18, 0x58	; 88
 2fc:	39 e3       	ldi	r19, 0x39	; 57
 2fe:	44 e7       	ldi	r20, 0x74	; 116
 300:	5f e3       	ldi	r21, 0x3F	; 63
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	f9 d2       	rcall	.+1522   	; 0x8fa <__cmpsf2>
 308:	88 23       	and	r24, r24
 30a:	3c f4       	brge	.+14     	; 0x31a <set_PWM+0x6e>
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	9f ef       	ldi	r25, 0xFF	; 255
 310:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 314:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 318:	23 c0       	rjmp	.+70     	; 0x360 <set_PWM+0xb4>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	34 e2       	ldi	r19, 0x24	; 36
 31e:	44 ef       	ldi	r20, 0xF4	; 244
 320:	56 e4       	ldi	r21, 0x46	; 70
 322:	c7 01       	movw	r24, r14
 324:	b6 01       	movw	r22, r12
 326:	fb d3       	rcall	.+2038   	; 0xb1e <__gesf2>
 328:	18 16       	cp	r1, r24
 32a:	2c f4       	brge	.+10     	; 0x336 <set_PWM+0x8a>
 32c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 330:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 334:	15 c0       	rjmp	.+42     	; 0x360 <set_PWM+0xb4>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	53 e4       	ldi	r21, 0x43	; 67
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	f1 d3       	rcall	.+2018   	; 0xb26 <__mulsf3>
 344:	9b 01       	movw	r18, r22
 346:	ac 01       	movw	r20, r24
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	74 e2       	ldi	r23, 0x24	; 36
 34c:	84 ef       	ldi	r24, 0xF4	; 244
 34e:	9a e4       	ldi	r25, 0x4A	; 74
 350:	d8 d2       	rcall	.+1456   	; 0x902 <__divsf3>
 352:	3f d3       	rcall	.+1662   	; 0x9d2 <__fixsfsi>
 354:	61 50       	subi	r22, 0x01	; 1
 356:	71 09       	sbc	r23, r1
 358:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 35c:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 360:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 364:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
 368:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <__data_end>
 36c:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <__data_end+0x1>
 370:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <__data_end+0x2>
 374:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <__data_end+0x3>
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	df 90       	pop	r13
 37e:	cf 90       	pop	r12
 380:	08 95       	ret

00000382 <PWM_on>:
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 388:	8b e0       	ldi	r24, 0x0B	; 11
 38a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 38e:	60 e0       	ldi	r22, 0x00	; 0
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	cb 01       	movw	r24, r22
 394:	8b cf       	rjmp	.-234    	; 0x2ac <set_PWM>
 396:	08 95       	ret

00000398 <playSound>:
}

void playSound(char tune)
{
	if(tune == 0x01)
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	31 f4       	brne	.+12     	; 0x3a8 <playSound+0x10>
	{
		// C4
		set_PWM(261.63);
 39c:	64 ea       	ldi	r22, 0xA4	; 164
 39e:	70 ed       	ldi	r23, 0xD0	; 208
 3a0:	82 e8       	ldi	r24, 0x82	; 130
 3a2:	93 e4       	ldi	r25, 0x43	; 67
 3a4:	83 cf       	rjmp	.-250    	; 0x2ac <set_PWM>
 3a6:	08 95       	ret
	}
	else if(tune == 0x02)
 3a8:	82 30       	cpi	r24, 0x02	; 2
 3aa:	31 f4       	brne	.+12     	; 0x3b8 <playSound+0x20>
	{
		// D4
		set_PWM(293.66);
 3ac:	6b e7       	ldi	r22, 0x7B	; 123
 3ae:	74 ed       	ldi	r23, 0xD4	; 212
 3b0:	82 e9       	ldi	r24, 0x92	; 146
 3b2:	93 e4       	ldi	r25, 0x43	; 67
 3b4:	7b cf       	rjmp	.-266    	; 0x2ac <set_PWM>
 3b6:	08 95       	ret
	}
	else if (tune == 0x04)
 3b8:	84 30       	cpi	r24, 0x04	; 4
 3ba:	31 f4       	brne	.+12     	; 0x3c8 <playSound+0x30>
	{
		// E4
		set_PWM(329.63);
 3bc:	64 ea       	ldi	r22, 0xA4	; 164
 3be:	70 ed       	ldi	r23, 0xD0	; 208
 3c0:	84 ea       	ldi	r24, 0xA4	; 164
 3c2:	93 e4       	ldi	r25, 0x43	; 67
 3c4:	73 cf       	rjmp	.-282    	; 0x2ac <set_PWM>
 3c6:	08 95       	ret
	}
	else if(tune == 0x08)
 3c8:	88 30       	cpi	r24, 0x08	; 8
 3ca:	31 f4       	brne	.+12     	; 0x3d8 <playSound+0x40>
	{
		// F4
		set_PWM(349.23);
 3cc:	61 e7       	ldi	r22, 0x71	; 113
 3ce:	7d e9       	ldi	r23, 0x9D	; 157
 3d0:	8e ea       	ldi	r24, 0xAE	; 174
 3d2:	93 e4       	ldi	r25, 0x43	; 67
 3d4:	6b cf       	rjmp	.-298    	; 0x2ac <set_PWM>
 3d6:	08 95       	ret
	}
	else
	{
		// No sound will play
		set_PWM(0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	70 e0       	ldi	r23, 0x00	; 0
 3dc:	cb 01       	movw	r24, r22
 3de:	66 cf       	rjmp	.-308    	; 0x2ac <set_PWM>
 3e0:	08 95       	ret

000003e2 <ADC_init>:
 3e2:	80 e4       	ldi	r24, 0x40	; 64
// ADC for joystick


void ADC_init() {
	ADMUX = (1<<REFS0);
 3e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 3e8:	87 e8       	ldi	r24, 0x87	; 135
 3ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 3ee:	08 95       	ret

000003f0 <ADC_read>:
}

uint16_t ADC_read(uint8_t ch){
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
 3f0:	ec e7       	ldi	r30, 0x7C	; 124
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	90 81       	ld	r25, Z
 3f6:	98 7f       	andi	r25, 0xF8	; 248
 3f8:	87 70       	andi	r24, 0x07	; 7
 3fa:	89 2b       	or	r24, r25
 3fc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);
 3fe:	ea e7       	ldi	r30, 0x7A	; 122
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	80 64       	ori	r24, 0x40	; 64
 406:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));
 408:	80 81       	ld	r24, Z
 40a:	86 fd       	sbrc	r24, 6
 40c:	fd cf       	rjmp	.-6      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	
	return (ADC);
 40e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 412:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 416:	08 95       	ret

00000418 <Tick>:

unsigned short a, b, c, d = 0x00;

void Tick(){
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
	unsigned short AD_LR = ADC_read(0);
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	e8 df       	rcall	.-48     	; 0x3f0 <ADC_read>
 420:	ec 01       	movw	r28, r24
	unsigned short AD_UD = ADC_read(1);
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	e5 df       	rcall	.-54     	; 0x3f0 <ADC_read>
	
	if (AD_LR < 100 ) {
 426:	c4 36       	cpi	r28, 0x64	; 100
 428:	d1 05       	cpc	r29, r1
 42a:	38 f4       	brcc	.+14     	; 0x43a <Tick+0x22>
		a = 0x01;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <a+0x1>
 434:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <a>
 438:	36 c0       	rjmp	.+108    	; 0x4a6 <Tick+0x8e>
	}
	
	else if (AD_LR > 900) {
 43a:	c5 38       	cpi	r28, 0x85	; 133
 43c:	23 e0       	ldi	r18, 0x03	; 3
 43e:	d2 07       	cpc	r29, r18
 440:	38 f0       	brcs	.+14     	; 0x450 <Tick+0x38>
		b = 0x02;
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <b+0x1>
 44a:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <b>
 44e:	2b c0       	rjmp	.+86     	; 0x4a6 <Tick+0x8e>
	}
	
	else if (AD_UD < 100) {
 450:	84 36       	cpi	r24, 0x64	; 100
 452:	91 05       	cpc	r25, r1
 454:	38 f4       	brcc	.+14     	; 0x464 <Tick+0x4c>
		c = 0x03;
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <c+0x1>
 45e:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <c>
 462:	21 c0       	rjmp	.+66     	; 0x4a6 <Tick+0x8e>
	}
	
	else if (AD_UD > 900) {
 464:	85 38       	cpi	r24, 0x85	; 133
 466:	23 e0       	ldi	r18, 0x03	; 3
 468:	92 07       	cpc	r25, r18
 46a:	38 f0       	brcs	.+14     	; 0x47a <Tick+0x62>
		d = 0x04;
 46c:	84 e0       	ldi	r24, 0x04	; 4
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	90 93 f2 01 	sts	0x01F2, r25	; 0x8001f2 <d+0x1>
 474:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <d>
 478:	16 c0       	rjmp	.+44     	; 0x4a6 <Tick+0x8e>
	}
	
	else if (AD_LR > 540 && AD_UD > 530 ) {
 47a:	cd 31       	cpi	r28, 0x1D	; 29
 47c:	d2 40       	sbci	r29, 0x02	; 2
 47e:	98 f0       	brcs	.+38     	; 0x4a6 <Tick+0x8e>
 480:	83 31       	cpi	r24, 0x13	; 19
 482:	92 40       	sbci	r25, 0x02	; 2
 484:	80 f0       	brcs	.+32     	; 0x4a6 <Tick+0x8e>
		a = 0x00;
 486:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <a+0x1>
 48a:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <a>
		b = 0x00;
 48e:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <b+0x1>
 492:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <b>
		c = 0x00;
 496:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <c+0x1>
 49a:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <c>
		d = 0x00;
 49e:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <d+0x1>
 4a2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <d>
	}
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <getInput>:
unsigned char currentValue;

void getInput() {	
	//a and b are initialized in Joystick.c
	
	j_Ldir = (a & 0x01) == 0x01;
 4ac:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <a>
 4b0:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <a+0x1>
 4b4:	81 70       	andi	r24, 0x01	; 1
 4b6:	99 27       	eor	r25, r25
 4b8:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <j_Ldir+0x1>
 4bc:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <j_Ldir>
	j_Udir = (b & 0x02) == 0x02;
 4c0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <b>
 4c4:	86 95       	lsr	r24
 4c6:	81 70       	andi	r24, 0x01	; 1
 4c8:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <j_Udir>
 4cc:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <j_Udir+0x1>
	j_Rdir = (c & 0x03) == 0x03;
 4d0:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <c>
 4d4:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <c+0x1>
 4d8:	83 70       	andi	r24, 0x03	; 3
 4da:	99 27       	eor	r25, r25
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	03 97       	sbiw	r24, 0x03	; 3
 4e2:	11 f0       	breq	.+4      	; 0x4e8 <getInput+0x3c>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	30 93 ee 01 	sts	0x01EE, r19	; 0x8001ee <j_Rdir+0x1>
 4ec:	20 93 ed 01 	sts	0x01ED, r18	; 0x8001ed <j_Rdir>
	j_Ddir = (d & 0x04) == 0x04;
 4f0:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <d>
 4f4:	82 fb       	bst	r24, 2
 4f6:	88 27       	eor	r24, r24
 4f8:	80 f9       	bld	r24, 0
 4fa:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <j_Ddir>
 4fe:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <j_Ddir+0x1>
 502:	08 95       	ret

00000504 <GAME_TICK>:

// Counters for timing .
unsigned char PlayBackCount = 0;

void GAME_TICK()
{
 504:	cf 93       	push	r28
	// Transition Table
	switch(game_state)
 506:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <game_state>
 50a:	8e 2f       	mov	r24, r30
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	89 30       	cpi	r24, 0x09	; 9
 510:	91 05       	cpc	r25, r1
 512:	08 f0       	brcs	.+2      	; 0x516 <GAME_TICK+0x12>
 514:	34 c1       	rjmp	.+616    	; 0x77e <GAME_TICK+0x27a>
 516:	fc 01       	movw	r30, r24
 518:	ea 5b       	subi	r30, 0xBA	; 186
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	67 c3       	rjmp	.+1742   	; 0xbec <__tablejump2__>
	{
		case Wait:
			if(j_Ldir || j_Rdir || j_Udir || j_Ddir ) {
 51e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <j_Ldir>
 522:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <j_Ldir+0x1>
 526:	89 2b       	or	r24, r25
 528:	99 f4       	brne	.+38     	; 0x550 <GAME_TICK+0x4c>
 52a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
 52e:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 532:	89 2b       	or	r24, r25
 534:	69 f4       	brne	.+26     	; 0x550 <GAME_TICK+0x4c>
 536:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 53a:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 53e:	89 2b       	or	r24, r25
 540:	39 f4       	brne	.+14     	; 0x550 <GAME_TICK+0x4c>
 542:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 546:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
 54a:	89 2b       	or	r24, r25
 54c:	09 f4       	brne	.+2      	; 0x550 <GAME_TICK+0x4c>
 54e:	2a c1       	rjmp	.+596    	; 0x7a4 <GAME_TICK+0x2a0>
				// Push any button to begin the game.
				game_state = Init;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				LCD_ClearScreen();
 556:	dd dd       	rcall	.-1094   	; 0x112 <LCD_ClearScreen>
				LCD_DisplayString(1, "   Simon Says!   Move joystick.");
 558:	64 e0       	ldi	r22, 0x04	; 4
 55a:	71 e0       	ldi	r23, 0x01	; 1
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	fc dd       	rcall	.-1032   	; 0x158 <LCD_DisplayString>
 560:	11 c1       	rjmp	.+546    	; 0x784 <GAME_TICK+0x280>
			}
			break;
		
		case Init:
			if( j_Ldir || j_Rdir || j_Udir || j_Ddir) {
 562:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <j_Ldir>
 566:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <j_Ldir+0x1>
 56a:	89 2b       	or	r24, r25
 56c:	09 f0       	breq	.+2      	; 0x570 <GAME_TICK+0x6c>
 56e:	1d c1       	rjmp	.+570    	; 0x7aa <GAME_TICK+0x2a6>
 570:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
 574:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 578:	89 2b       	or	r24, r25
 57a:	09 f0       	breq	.+2      	; 0x57e <GAME_TICK+0x7a>
 57c:	16 c1       	rjmp	.+556    	; 0x7aa <GAME_TICK+0x2a6>
 57e:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 582:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 586:	89 2b       	or	r24, r25
 588:	09 f0       	breq	.+2      	; 0x58c <GAME_TICK+0x88>
 58a:	0f c1       	rjmp	.+542    	; 0x7aa <GAME_TICK+0x2a6>
 58c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 590:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
 594:	89 2b       	or	r24, r25
 596:	09 f0       	breq	.+2      	; 0x59a <GAME_TICK+0x96>
 598:	08 c1       	rjmp	.+528    	; 0x7aa <GAME_TICK+0x2a6>
				game_state = Init;
			}
			
			else {
				// They let go of the button, now its time to start the game.
				game_state = Add_LED;
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
 5a0:	0d c1       	rjmp	.+538    	; 0x7bc <GAME_TICK+0x2b8>
			}
			break;
		
		case Add_LED:
			game_state = Repeat_Order;
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
			LCD_ClearScreen();
			LCD_DisplayString(1, "Repeat after me.  Points: ");
 5a8:	b4 dd       	rcall	.-1176   	; 0x112 <LCD_ClearScreen>
 5aa:	64 e2       	ldi	r22, 0x24	; 36
 5ac:	71 e0       	ldi	r23, 0x01	; 1
 5ae:	81 e0       	ldi	r24, 0x01	; 1
			LCD_WriteData('0' + Rounds_Count - 1);
 5b0:	d3 dd       	rcall	.-1114   	; 0x158 <LCD_DisplayString>
 5b2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Rounds_Count>
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	8f 96       	adiw	r24, 0x2f	; 47
 5ba:	c5 dd       	rcall	.-1142   	; 0x146 <LCD_WriteData>
			break;
 5bc:	e3 c0       	rjmp	.+454    	; 0x784 <GAME_TICK+0x280>
		
		case Repeat_Order:
			// We have played back the whole generated sequence.
			if(Repeatpattern_nextposition >= Rounds_Count) {
 5be:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <Repeatpattern_nextposition>
 5c2:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <Rounds_Count>
 5c6:	89 17       	cp	r24, r25
 5c8:	88 f0       	brcs	.+34     	; 0x5ec <GAME_TICK+0xe8>
				// Go wait for their input.
				game_state = Get_Input;
 5ca:	84 e0       	ldi	r24, 0x04	; 4
 5cc:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				// Reset everything.
				Repeatpattern_nextposition = 0;
				PORTB = 0x00;
 5d0:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <Repeatpattern_nextposition>
				LCD_ClearScreen();
 5d4:	15 b8       	out	0x05, r1	; 5
				LCD_DisplayString(1, "    You try.       Points: ");
 5d6:	9d dd       	rcall	.-1222   	; 0x112 <LCD_ClearScreen>
 5d8:	6f e3       	ldi	r22, 0x3F	; 63
 5da:	71 e0       	ldi	r23, 0x01	; 1
 5dc:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData('0' + Rounds_Count - 1);
 5de:	bc dd       	rcall	.-1160   	; 0x158 <LCD_DisplayString>
 5e0:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Rounds_Count>
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	8f 96       	adiw	r24, 0x2f	; 47
 5e8:	ae dd       	rcall	.-1188   	; 0x146 <LCD_WriteData>
 5ea:	cc c0       	rjmp	.+408    	; 0x784 <GAME_TICK+0x280>
			}
			
			else {
				// We have given them enough time to look at the LED.
				if(PlayBackCount > MAX_WAIT_PER_LED) {
 5ec:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <PlayBackCount>
 5f0:	93 30       	cpi	r25, 0x03	; 3
 5f2:	30 f0       	brcs	.+12     	; 0x600 <GAME_TICK+0xfc>
					game_state = Repeat_Order;
					Repeatpattern_nextposition++;
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <Repeatpattern_nextposition>
					PlayBackCount = 0;
 5fa:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <PlayBackCount>
 5fe:	fa c0       	rjmp	.+500    	; 0x7f4 <GAME_TICK+0x2f0>
				}
				else {
					// Wait for them to see the LED.
					PlayBackCount++;
 600:	9f 5f       	subi	r25, 0xFF	; 255
 602:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <PlayBackCount>
				playSound(0);
			}
			break;
		
		case Repeat_Order:
			if(Repeatpattern_nextposition < Rounds_Count) {
 606:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Repeatpattern_nextposition>
 60a:	fb c0       	rjmp	.+502    	; 0x802 <GAME_TICK+0x2fe>
			}
			break;
		
		case Add_Points:
			// Update points
			PORTB = 0;
 60c:	15 b8       	out	0x05, r1	; 5
			if(j_Ldir || j_Rdir || j_Udir || j_Ddir) {
 60e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <j_Ldir>
 612:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <j_Ldir+0x1>
 616:	89 2b       	or	r24, r25
 618:	91 f4       	brne	.+36     	; 0x63e <GAME_TICK+0x13a>
 61a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
 61e:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 622:	89 2b       	or	r24, r25
 624:	61 f4       	brne	.+24     	; 0x63e <GAME_TICK+0x13a>
 626:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 62a:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 62e:	89 2b       	or	r24, r25
 630:	31 f4       	brne	.+12     	; 0x63e <GAME_TICK+0x13a>
 632:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 636:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
				game_state = Add_Points;
 63a:	89 2b       	or	r24, r25
 63c:	71 f0       	breq	.+28     	; 0x65a <GAME_TICK+0x156>
 63e:	88 e0       	ldi	r24, 0x08	; 8
				LCD_ClearScreen();
 640:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				LCD_DisplayString(1, "That is correct! Points: ");
 644:	66 dd       	rcall	.-1332   	; 0x112 <LCD_ClearScreen>
 646:	6b e5       	ldi	r22, 0x5B	; 91
 648:	71 e0       	ldi	r23, 0x01	; 1
 64a:	81 e0       	ldi	r24, 0x01	; 1
				LCD_WriteData('0' + (Rounds_Count));
 64c:	85 dd       	rcall	.-1270   	; 0x158 <LCD_DisplayString>
 64e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Rounds_Count>
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	c0 96       	adiw	r24, 0x30	; 48
 656:	77 dd       	rcall	.-1298   	; 0x146 <LCD_WriteData>
 658:	95 c0       	rjmp	.+298    	; 0x784 <GAME_TICK+0x280>
			}
			
			else if(Check_nextposition < MAX_ROUNDS) {
 65a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Check_nextposition>
 65e:	89 30       	cpi	r24, 0x09	; 9
				Check_nextposition = 0;
 660:	30 f4       	brcc	.+12     	; 0x66e <GAME_TICK+0x16a>
				game_state = Add_LED;
 662:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Check_nextposition>
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
			}
			
			else {
				// They win the game if they hit 9 rounds
				game_state = Win;
 66c:	a7 c0       	rjmp	.+334    	; 0x7bc <GAME_TICK+0x2b8>
 66e:	87 e0       	ldi	r24, 0x07	; 7
				LCD_ClearScreen();
 670:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				LCD_DisplayString(1, "    You win!       Play again!");
 674:	4e dd       	rcall	.-1380   	; 0x112 <LCD_ClearScreen>
 676:	65 e7       	ldi	r22, 0x75	; 117
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	6d dd       	rcall	.-1318   	; 0x158 <LCD_DisplayString>
 67e:	82 c0       	rjmp	.+260    	; 0x784 <GAME_TICK+0x280>
			}
			break;
		
		case Win:
			if(j_Ldir || j_Rdir || j_Udir || j_Ddir) {
 680:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <j_Ldir>
 684:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <j_Ldir+0x1>
 688:	89 2b       	or	r24, r25
 68a:	99 f4       	brne	.+38     	; 0x6b2 <GAME_TICK+0x1ae>
 68c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
 690:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 694:	89 2b       	or	r24, r25
 696:	69 f4       	brne	.+26     	; 0x6b2 <GAME_TICK+0x1ae>
 698:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 69c:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 6a0:	89 2b       	or	r24, r25
 6a2:	39 f4       	brne	.+14     	; 0x6b2 <GAME_TICK+0x1ae>
 6a4:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 6a8:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
 6ac:	89 2b       	or	r24, r25
				// Restart the game.
				game_state = Wait;
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <GAME_TICK+0x1ae>
 6b0:	f6 c0       	rjmp	.+492    	; 0x89e <GAME_TICK+0x39a>
				LCD_ClearScreen();
 6b2:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <game_state>
				LCD_DisplayString(1, "   Simon Says!   Move joystick");
 6b6:	2d dd       	rcall	.-1446   	; 0x112 <LCD_ClearScreen>
 6b8:	64 e9       	ldi	r22, 0x94	; 148
 6ba:	71 e0       	ldi	r23, 0x01	; 1
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	4c dd       	rcall	.-1384   	; 0x158 <LCD_DisplayString>
				playSound(0);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	6a de       	rcall	.-812    	; 0x398 <playSound>
 6c4:	5f c0       	rjmp	.+190    	; 0x784 <GAME_TICK+0x280>
 6c6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <j_Ldir>
			}
			break;
		
		case Lose:
			if(j_Ldir || j_Rdir || j_Udir || j_Ddir) {
 6ca:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <j_Ldir+0x1>
 6ce:	89 2b       	or	r24, r25
 6d0:	99 f4       	brne	.+38     	; 0x6f8 <GAME_TICK+0x1f4>
 6d2:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
 6d6:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 6da:	89 2b       	or	r24, r25
 6dc:	69 f4       	brne	.+26     	; 0x6f8 <GAME_TICK+0x1f4>
 6de:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 6e2:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 6e6:	89 2b       	or	r24, r25
 6e8:	39 f4       	brne	.+14     	; 0x6f8 <GAME_TICK+0x1f4>
 6ea:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 6ee:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
				// Restart the game.
				game_state = Wait;
 6f2:	89 2b       	or	r24, r25
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <GAME_TICK+0x1f4>
				LCD_ClearScreen();
 6f6:	d3 c0       	rjmp	.+422    	; 0x89e <GAME_TICK+0x39a>
 6f8:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <game_state>
				LCD_DisplayString(1, "   Simon Says!   Move joystick");
 6fc:	0a dd       	rcall	.-1516   	; 0x112 <LCD_ClearScreen>
 6fe:	64 e9       	ldi	r22, 0x94	; 148
 700:	71 e0       	ldi	r23, 0x01	; 1
 702:	81 e0       	ldi	r24, 0x01	; 1
				playSound(0);
 704:	29 dd       	rcall	.-1454   	; 0x158 <LCD_DisplayString>
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	47 de       	rcall	.-882    	; 0x398 <playSound>
			}
			break;
		
		case Get_Input:
			playSound(0);
 70a:	3c c0       	rjmp	.+120    	; 0x784 <GAME_TICK+0x280>
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	44 de       	rcall	.-888    	; 0x398 <playSound>
			if(Check_nextposition >= Rounds_Count) {
 710:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <Check_nextposition>
 714:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Rounds_Count>
 718:	98 17       	cp	r25, r24
 71a:	20 f0       	brcs	.+8      	; 0x724 <GAME_TICK+0x220>
				// Win for the round because positions match
				game_state = Add_Points;
 71c:	88 e0       	ldi	r24, 0x08	; 8
 71e:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
 722:	bd c0       	rjmp	.+378    	; 0x89e <GAME_TICK+0x39a>
			}
			
			else {
				game_state = Get_Input;
 724:	84 e0       	ldi	r24, 0x04	; 4
 726:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				playSound(0);
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	35 de       	rcall	.-918    	; 0x398 <playSound>
 72e:	2a c0       	rjmp	.+84     	; 0x784 <GAME_TICK+0x280>
 730:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <j_Ldir>
			}
			break;
		
		case Get_Next_Input:
			if(j_Ldir || j_Rdir || j_Udir || j_Ddir) {
 734:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <j_Ldir+0x1>
 738:	89 2b       	or	r24, r25
 73a:	09 f0       	breq	.+2      	; 0x73e <GAME_TICK+0x23a>
 73c:	b0 c0       	rjmp	.+352    	; 0x89e <GAME_TICK+0x39a>
 73e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
 742:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 746:	89 2b       	or	r24, r25
 748:	09 f0       	breq	.+2      	; 0x74c <GAME_TICK+0x248>
 74a:	a9 c0       	rjmp	.+338    	; 0x89e <GAME_TICK+0x39a>
 74c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 750:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 754:	89 2b       	or	r24, r25
 756:	09 f0       	breq	.+2      	; 0x75a <GAME_TICK+0x256>
 758:	a2 c0       	rjmp	.+324    	; 0x89e <GAME_TICK+0x39a>
 75a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 75e:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
 762:	89 2b       	or	r24, r25
 764:	09 f0       	breq	.+2      	; 0x768 <GAME_TICK+0x264>
 766:	9b c0       	rjmp	.+310    	; 0x89e <GAME_TICK+0x39a>
				game_state = Get_Next_Input;
			}
		
			else {
				Check_nextposition++;
 768:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <Check_nextposition>
 76c:	8f 5f       	subi	r24, 0xFF	; 255
 76e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <Check_nextposition>
				game_state = Get_Input;
 772:	84 e0       	ldi	r24, 0x04	; 4
 774:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				playSound(0);
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	0e de       	rcall	.-996    	; 0x398 <playSound>
 77c:	03 c0       	rjmp	.+6      	; 0x784 <GAME_TICK+0x280>
			}
			break;
		
		default:
			game_state = Wait;
 77e:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <game_state>
			break;
 782:	10 c0       	rjmp	.+32     	; 0x7a4 <GAME_TICK+0x2a0>
	}
	
	switch(game_state) {
 784:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <game_state>
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	c1 f0       	breq	.+48     	; 0x7bc <GAME_TICK+0x2b8>
 78c:	28 f4       	brcc	.+10     	; 0x798 <GAME_TICK+0x294>
 78e:	88 23       	and	r24, r24
 790:	49 f0       	breq	.+18     	; 0x7a4 <GAME_TICK+0x2a0>
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	51 f0       	breq	.+20     	; 0x7aa <GAME_TICK+0x2a6>
 796:	83 c0       	rjmp	.+262    	; 0x89e <GAME_TICK+0x39a>
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	61 f1       	breq	.+88     	; 0x7f4 <GAME_TICK+0x2f0>
 79c:	84 30       	cpi	r24, 0x04	; 4
 79e:	09 f4       	brne	.+2      	; 0x7a2 <GAME_TICK+0x29e>
 7a0:	3e c0       	rjmp	.+124    	; 0x81e <GAME_TICK+0x31a>
		case Wait:
			playSound(0);
 7a2:	7d c0       	rjmp	.+250    	; 0x89e <GAME_TICK+0x39a>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	f8 dd       	rcall	.-1040   	; 0x398 <playSound>
			break;
 7a8:	7a c0       	rjmp	.+244    	; 0x89e <GAME_TICK+0x39a>
		case Add_Points:
			break;
		
		case Init:
			// Reset all game states.
			Make_nextposition = 0;
 7aa:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <Make_nextposition>
			Repeatpattern_nextposition = 0;
 7ae:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <Repeatpattern_nextposition>
			Rounds_Count = 0;
 7b2:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <Rounds_Count>
			Check_nextposition = 0;
 7b6:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <Check_nextposition>
			break;
 7ba:	71 c0       	rjmp	.+226    	; 0x89e <GAME_TICK+0x39a>
		
		case Add_LED:
			PORTB = 0;
 7bc:	15 b8       	out	0x05, r1	; 5
			if(Make_nextposition < MAX_ROUNDS) {
 7be:	c0 91 e8 01 	lds	r28, 0x01E8	; 0x8001e8 <Make_nextposition>
 7c2:	c9 30       	cpi	r28, 0x09	; 9
				Pattern[Make_nextposition] = getRandomLed();
 7c4:	88 f4       	brcc	.+34     	; 0x7e8 <GAME_TICK+0x2e4>
 7c6:	69 dd       	rcall	.-1326   	; 0x29a <getRandomLed>
 7c8:	ec 2f       	mov	r30, r28
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	ef 5f       	subi	r30, 0xFF	; 255
 7ce:	fd 4f       	sbci	r31, 0xFD	; 253
 7d0:	80 83       	st	Z, r24
				Make_nextposition++;
 7d2:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <Make_nextposition>
 7d6:	8f 5f       	subi	r24, 0xFF	; 255
 7d8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <Make_nextposition>
				Rounds_Count++;
 7dc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Rounds_Count>
 7e0:	8f 5f       	subi	r24, 0xFF	; 255
 7e2:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <Rounds_Count>
 7e6:	5b c0       	rjmp	.+182    	; 0x89e <GAME_TICK+0x39a>
			}
			
			else {
				// Some kind of win sequence.
				game_state = Win;
 7e8:	87 e0       	ldi	r24, 0x07	; 7
 7ea:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				playSound(0);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	d3 dd       	rcall	.-1114   	; 0x398 <playSound>
 7f2:	55 c0       	rjmp	.+170    	; 0x89e <GAME_TICK+0x39a>
			}
			break;
		
		case Repeat_Order:
			if(Repeatpattern_nextposition < Rounds_Count) {
 7f4:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Repeatpattern_nextposition>
 7f8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <Rounds_Count>
 7fc:	e8 17       	cp	r30, r24
 7fe:	08 f0       	brcs	.+2      	; 0x802 <GAME_TICK+0x2fe>
 800:	4e c0       	rjmp	.+156    	; 0x89e <GAME_TICK+0x39a>
				PORTB = Pattern[Repeatpattern_nextposition] << 1;
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	ef 5f       	subi	r30, 0xFF	; 255
 806:	fd 4f       	sbci	r31, 0xFD	; 253
 808:	80 81       	ld	r24, Z
 80a:	88 0f       	add	r24, r24
 80c:	85 b9       	out	0x05, r24	; 5
				playSound(Pattern[Repeatpattern_nextposition]);
 80e:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <Repeatpattern_nextposition>
 812:	f0 e0       	ldi	r31, 0x00	; 0
 814:	ef 5f       	subi	r30, 0xFF	; 255
 816:	fd 4f       	sbci	r31, 0xFD	; 253
 818:	80 81       	ld	r24, Z
 81a:	be dd       	rcall	.-1156   	; 0x398 <playSound>
 81c:	40 c0       	rjmp	.+128    	; 0x89e <GAME_TICK+0x39a>
 81e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <j_Rdir>
			}
			break;
		
		case Get_Input:
			currentValue =  (j_Ldir) | (j_Rdir << 1) | (j_Udir << 2) | (j_Ddir << 3);
 822:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <j_Rdir+0x1>
 826:	9c 01       	movw	r18, r24
 828:	22 0f       	add	r18, r18
 82a:	33 1f       	adc	r19, r19
 82c:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <j_Udir>
 830:	90 91 ec 01 	lds	r25, 0x01EC	; 0x8001ec <j_Udir+0x1>
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	82 2b       	or	r24, r18
 83e:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <j_Ldir>
 842:	28 2b       	or	r18, r24
 844:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <j_Ddir>
 848:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <j_Ddir+0x1>
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	82 2b       	or	r24, r18
 85a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <currentValue>
			PORTB = currentValue << 1;
 85e:	88 0f       	add	r24, r24
			playSound(currentValue);
 860:	85 b9       	out	0x05, r24	; 5
 862:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <currentValue>
			
			if(currentValue == 0) {	// No input.
 866:	98 dd       	rcall	.-1232   	; 0x398 <playSound>
 868:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <currentValue>
 86c:	88 23       	and	r24, r24
				break;
			}
			
			else if(currentValue == Pattern[Check_nextposition]) {
 86e:	b9 f0       	breq	.+46     	; 0x89e <GAME_TICK+0x39a>
 870:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <Check_nextposition>
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	ef 5f       	subi	r30, 0xFF	; 255
 878:	fd 4f       	sbci	r31, 0xFD	; 253
 87a:	90 81       	ld	r25, Z
 87c:	89 13       	cpse	r24, r25
				// It matched, keep moving forward to check next location.
				//Check_nextposition++;
				game_state = Get_Next_Input;
 87e:	04 c0       	rjmp	.+8      	; 0x888 <GAME_TICK+0x384>
 880:	85 e0       	ldi	r24, 0x05	; 5
 882:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
			}
		
			else {
				// Wrong input loses the game
				game_state = Lose;
 886:	0b c0       	rjmp	.+22     	; 0x89e <GAME_TICK+0x39a>
 888:	86 e0       	ldi	r24, 0x06	; 6
 88a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <game_state>
				playSound(0);
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	83 dd       	rcall	.-1274   	; 0x398 <playSound>
				LCD_ClearScreen();
 892:	3f dc       	rcall	.-1922   	; 0x112 <LCD_ClearScreen>
 894:	63 eb       	ldi	r22, 0xB3	; 179
				LCD_DisplayString(1, "You Lost =(");
 896:	71 e0       	ldi	r23, 0x01	; 1
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	5e dc       	rcall	.-1860   	; 0x158 <LCD_DisplayString>
 89c:	15 b8       	out	0x05, r1	; 5
 89e:	cf 91       	pop	r28
				PORTB = 0x00;
 8a0:	08 95       	ret

000008a2 <main>:
			}
			break;
	}
}
 8a2:	11 b8       	out	0x01, r1	; 1
 8a4:	8f ef       	ldi	r24, 0xFF	; 255

int main(void)
{
	// Init the input.
	DDRA = 0x00; PORTA = 0xFF;
 8a6:	82 b9       	out	0x02, r24	; 2
	// Init the outputs
	DDRB = 0xFF; PORTB = 0x00;
 8a8:	84 b9       	out	0x04, r24	; 4
 8aa:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 8ac:	87 b9       	out	0x07, r24	; 7
 8ae:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 8b0:	8a b9       	out	0x0a, r24	; 10
 8b2:	1b b8       	out	0x0b, r1	; 11

	// Init the LCD.
	LCD_init();
 8b4:	39 dc       	rcall	.-1934   	; 0x128 <LCD_init>
	PWM_on();
 8b6:	65 dd       	rcall	.-1334   	; 0x382 <PWM_on>
 8b8:	81 e0       	ldi	r24, 0x01	; 1
uint8_t state[1];

// Inits the system. Seed must not be 0.
void Initialize(uint8_t seed)
{
	state[0] = seed;
 8ba:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <state>
 8be:	68 ec       	ldi	r22, 0xC8	; 200
	
	// Set the seed for the PNR.
	Initialize(1);				// Use a set seed so it could repeat
	
	TimerSet(200);
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	61 dc       	rcall	.-1854   	; 0x18a <TimerSet>
	TimerOn();
 8c8:	71 dc       	rcall	.-1822   	; 0x1ac <TimerOn>
	
	game_state = Wait;
 8ca:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <game_state>
	
	LCD_ClearScreen();
 8ce:	21 dc       	rcall	.-1982   	; 0x112 <LCD_ClearScreen>
	LCD_DisplayString(1, "   Simon Says!    *Press a key*");
 8d0:	6f eb       	ldi	r22, 0xBF	; 191
 8d2:	71 e0       	ldi	r23, 0x01	; 1
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	40 dc       	rcall	.-1920   	; 0x158 <LCD_DisplayString>
	set_PWM(0);
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	70 e0       	ldi	r23, 0x00	; 0
	
	while (1)
	{
		LCD_Cursor(0);
 8dc:	cb 01       	movw	r24, r22
 8de:	e6 dc       	rcall	.-1588   	; 0x2ac <set_PWM>
 8e0:	80 e0       	ldi	r24, 0x00	; 0
		Tick();
 8e2:	1a dc       	rcall	.-1996   	; 0x118 <LCD_Cursor>
 8e4:	99 dd       	rcall	.-1230   	; 0x418 <Tick>
		ADC_init();
 8e6:	7d dd       	rcall	.-1286   	; 0x3e2 <ADC_init>
 8e8:	e1 dd       	rcall	.-1086   	; 0x4ac <getInput>
		getInput();
 8ea:	0c de       	rcall	.-1000   	; 0x504 <GAME_TICK>
 8ec:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <TimerFlag>
		GAME_TICK();
 8f0:	88 23       	and	r24, r24
		
		while(!TimerFlag);
 8f2:	e1 f3       	breq	.-8      	; 0x8ec <main+0x4a>
 8f4:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <TimerFlag>
 8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <main+0x3e>

000008fa <__cmpsf2>:
		TimerFlag = 0;
 8fa:	9c d0       	rcall	.+312    	; 0xa34 <__fp_cmp>
 8fc:	08 f4       	brcc	.+2      	; 0x900 <__cmpsf2+0x6>
	}
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	08 95       	ret

00000902 <__divsf3>:
 902:	0c d0       	rcall	.+24     	; 0x91c <__divsf3x>
 904:	d2 c0       	rjmp	.+420    	; 0xaaa <__fp_round>
 906:	ca d0       	rcall	.+404    	; 0xa9c <__fp_pscB>
 908:	40 f0       	brcs	.+16     	; 0x91a <__divsf3+0x18>
 90a:	c1 d0       	rcall	.+386    	; 0xa8e <__fp_pscA>
 90c:	30 f0       	brcs	.+12     	; 0x91a <__divsf3+0x18>
 90e:	21 f4       	brne	.+8      	; 0x918 <__divsf3+0x16>
 910:	5f 3f       	cpi	r21, 0xFF	; 255
 912:	19 f0       	breq	.+6      	; 0x91a <__divsf3+0x18>
 914:	b3 c0       	rjmp	.+358    	; 0xa7c <__fp_inf>
 916:	51 11       	cpse	r21, r1
 918:	fc c0       	rjmp	.+504    	; 0xb12 <__fp_szero>
 91a:	b6 c0       	rjmp	.+364    	; 0xa88 <__fp_nan>

0000091c <__divsf3x>:
 91c:	d7 d0       	rcall	.+430    	; 0xacc <__fp_split3>
 91e:	98 f3       	brcs	.-26     	; 0x906 <__divsf3+0x4>

00000920 <__divsf3_pse>:
 920:	99 23       	and	r25, r25
 922:	c9 f3       	breq	.-14     	; 0x916 <__divsf3+0x14>
 924:	55 23       	and	r21, r21
 926:	b1 f3       	breq	.-20     	; 0x914 <__divsf3+0x12>
 928:	95 1b       	sub	r25, r21
 92a:	55 0b       	sbc	r21, r21
 92c:	bb 27       	eor	r27, r27
 92e:	aa 27       	eor	r26, r26
 930:	62 17       	cp	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	38 f0       	brcs	.+14     	; 0x946 <__divsf3_pse+0x26>
 938:	9f 5f       	subi	r25, 0xFF	; 255
 93a:	5f 4f       	sbci	r21, 0xFF	; 255
 93c:	22 0f       	add	r18, r18
 93e:	33 1f       	adc	r19, r19
 940:	44 1f       	adc	r20, r20
 942:	aa 1f       	adc	r26, r26
 944:	a9 f3       	breq	.-22     	; 0x930 <__divsf3_pse+0x10>
 946:	33 d0       	rcall	.+102    	; 0x9ae <__divsf3_pse+0x8e>
 948:	0e 2e       	mov	r0, r30
 94a:	3a f0       	brmi	.+14     	; 0x95a <__divsf3_pse+0x3a>
 94c:	e0 e8       	ldi	r30, 0x80	; 128
 94e:	30 d0       	rcall	.+96     	; 0x9b0 <__divsf3_pse+0x90>
 950:	91 50       	subi	r25, 0x01	; 1
 952:	50 40       	sbci	r21, 0x00	; 0
 954:	e6 95       	lsr	r30
 956:	00 1c       	adc	r0, r0
 958:	ca f7       	brpl	.-14     	; 0x94c <__divsf3_pse+0x2c>
 95a:	29 d0       	rcall	.+82     	; 0x9ae <__divsf3_pse+0x8e>
 95c:	fe 2f       	mov	r31, r30
 95e:	27 d0       	rcall	.+78     	; 0x9ae <__divsf3_pse+0x8e>
 960:	66 0f       	add	r22, r22
 962:	77 1f       	adc	r23, r23
 964:	88 1f       	adc	r24, r24
 966:	bb 1f       	adc	r27, r27
 968:	26 17       	cp	r18, r22
 96a:	37 07       	cpc	r19, r23
 96c:	48 07       	cpc	r20, r24
 96e:	ab 07       	cpc	r26, r27
 970:	b0 e8       	ldi	r27, 0x80	; 128
 972:	09 f0       	breq	.+2      	; 0x976 <__divsf3_pse+0x56>
 974:	bb 0b       	sbc	r27, r27
 976:	80 2d       	mov	r24, r0
 978:	bf 01       	movw	r22, r30
 97a:	ff 27       	eor	r31, r31
 97c:	93 58       	subi	r25, 0x83	; 131
 97e:	5f 4f       	sbci	r21, 0xFF	; 255
 980:	2a f0       	brmi	.+10     	; 0x98c <__divsf3_pse+0x6c>
 982:	9e 3f       	cpi	r25, 0xFE	; 254
 984:	51 05       	cpc	r21, r1
 986:	68 f0       	brcs	.+26     	; 0x9a2 <__divsf3_pse+0x82>
 988:	79 c0       	rjmp	.+242    	; 0xa7c <__fp_inf>
 98a:	c3 c0       	rjmp	.+390    	; 0xb12 <__fp_szero>
 98c:	5f 3f       	cpi	r21, 0xFF	; 255
 98e:	ec f3       	brlt	.-6      	; 0x98a <__divsf3_pse+0x6a>
 990:	98 3e       	cpi	r25, 0xE8	; 232
 992:	dc f3       	brlt	.-10     	; 0x98a <__divsf3_pse+0x6a>
 994:	86 95       	lsr	r24
 996:	77 95       	ror	r23
 998:	67 95       	ror	r22
 99a:	b7 95       	ror	r27
 99c:	f7 95       	ror	r31
 99e:	9f 5f       	subi	r25, 0xFF	; 255
 9a0:	c9 f7       	brne	.-14     	; 0x994 <__divsf3_pse+0x74>
 9a2:	88 0f       	add	r24, r24
 9a4:	91 1d       	adc	r25, r1
 9a6:	96 95       	lsr	r25
 9a8:	87 95       	ror	r24
 9aa:	97 f9       	bld	r25, 7
 9ac:	08 95       	ret
 9ae:	e1 e0       	ldi	r30, 0x01	; 1
 9b0:	66 0f       	add	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	bb 1f       	adc	r27, r27
 9b8:	62 17       	cp	r22, r18
 9ba:	73 07       	cpc	r23, r19
 9bc:	84 07       	cpc	r24, r20
 9be:	ba 07       	cpc	r27, r26
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__divsf3_pse+0xaa>
 9c2:	62 1b       	sub	r22, r18
 9c4:	73 0b       	sbc	r23, r19
 9c6:	84 0b       	sbc	r24, r20
 9c8:	ba 0b       	sbc	r27, r26
 9ca:	ee 1f       	adc	r30, r30
 9cc:	88 f7       	brcc	.-30     	; 0x9b0 <__divsf3_pse+0x90>
 9ce:	e0 95       	com	r30
 9d0:	08 95       	ret

000009d2 <__fixsfsi>:
 9d2:	04 d0       	rcall	.+8      	; 0x9dc <__fixunssfsi>
 9d4:	68 94       	set
 9d6:	b1 11       	cpse	r27, r1
 9d8:	9c c0       	rjmp	.+312    	; 0xb12 <__fp_szero>
 9da:	08 95       	ret

000009dc <__fixunssfsi>:
 9dc:	7f d0       	rcall	.+254    	; 0xadc <__fp_splitA>
 9de:	88 f0       	brcs	.+34     	; 0xa02 <__fixunssfsi+0x26>
 9e0:	9f 57       	subi	r25, 0x7F	; 127
 9e2:	90 f0       	brcs	.+36     	; 0xa08 <__fixunssfsi+0x2c>
 9e4:	b9 2f       	mov	r27, r25
 9e6:	99 27       	eor	r25, r25
 9e8:	b7 51       	subi	r27, 0x17	; 23
 9ea:	a0 f0       	brcs	.+40     	; 0xa14 <__fixunssfsi+0x38>
 9ec:	d1 f0       	breq	.+52     	; 0xa22 <__fixunssfsi+0x46>
 9ee:	66 0f       	add	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	1a f0       	brmi	.+6      	; 0x9fe <__fixunssfsi+0x22>
 9f8:	ba 95       	dec	r27
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__fixunssfsi+0x12>
 9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__fixunssfsi+0x46>
 9fe:	b1 30       	cpi	r27, 0x01	; 1
 a00:	81 f0       	breq	.+32     	; 0xa22 <__fixunssfsi+0x46>
 a02:	86 d0       	rcall	.+268    	; 0xb10 <__fp_zero>
 a04:	b1 e0       	ldi	r27, 0x01	; 1
 a06:	08 95       	ret
 a08:	83 c0       	rjmp	.+262    	; 0xb10 <__fp_zero>
 a0a:	67 2f       	mov	r22, r23
 a0c:	78 2f       	mov	r23, r24
 a0e:	88 27       	eor	r24, r24
 a10:	b8 5f       	subi	r27, 0xF8	; 248
 a12:	39 f0       	breq	.+14     	; 0xa22 <__fixunssfsi+0x46>
 a14:	b9 3f       	cpi	r27, 0xF9	; 249
 a16:	cc f3       	brlt	.-14     	; 0xa0a <__fixunssfsi+0x2e>
 a18:	86 95       	lsr	r24
 a1a:	77 95       	ror	r23
 a1c:	67 95       	ror	r22
 a1e:	b3 95       	inc	r27
 a20:	d9 f7       	brne	.-10     	; 0xa18 <__fixunssfsi+0x3c>
 a22:	3e f4       	brtc	.+14     	; 0xa32 <__fixunssfsi+0x56>
 a24:	90 95       	com	r25
 a26:	80 95       	com	r24
 a28:	70 95       	com	r23
 a2a:	61 95       	neg	r22
 a2c:	7f 4f       	sbci	r23, 0xFF	; 255
 a2e:	8f 4f       	sbci	r24, 0xFF	; 255
 a30:	9f 4f       	sbci	r25, 0xFF	; 255
 a32:	08 95       	ret

00000a34 <__fp_cmp>:
 a34:	99 0f       	add	r25, r25
 a36:	00 08       	sbc	r0, r0
 a38:	55 0f       	add	r21, r21
 a3a:	aa 0b       	sbc	r26, r26
 a3c:	e0 e8       	ldi	r30, 0x80	; 128
 a3e:	fe ef       	ldi	r31, 0xFE	; 254
 a40:	16 16       	cp	r1, r22
 a42:	17 06       	cpc	r1, r23
 a44:	e8 07       	cpc	r30, r24
 a46:	f9 07       	cpc	r31, r25
 a48:	c0 f0       	brcs	.+48     	; 0xa7a <__fp_cmp+0x46>
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	e4 07       	cpc	r30, r20
 a50:	f5 07       	cpc	r31, r21
 a52:	98 f0       	brcs	.+38     	; 0xa7a <__fp_cmp+0x46>
 a54:	62 1b       	sub	r22, r18
 a56:	73 0b       	sbc	r23, r19
 a58:	84 0b       	sbc	r24, r20
 a5a:	95 0b       	sbc	r25, r21
 a5c:	39 f4       	brne	.+14     	; 0xa6c <__fp_cmp+0x38>
 a5e:	0a 26       	eor	r0, r26
 a60:	61 f0       	breq	.+24     	; 0xa7a <__fp_cmp+0x46>
 a62:	23 2b       	or	r18, r19
 a64:	24 2b       	or	r18, r20
 a66:	25 2b       	or	r18, r21
 a68:	21 f4       	brne	.+8      	; 0xa72 <__fp_cmp+0x3e>
 a6a:	08 95       	ret
 a6c:	0a 26       	eor	r0, r26
 a6e:	09 f4       	brne	.+2      	; 0xa72 <__fp_cmp+0x3e>
 a70:	a1 40       	sbci	r26, 0x01	; 1
 a72:	a6 95       	lsr	r26
 a74:	8f ef       	ldi	r24, 0xFF	; 255
 a76:	81 1d       	adc	r24, r1
 a78:	81 1d       	adc	r24, r1
 a7a:	08 95       	ret

00000a7c <__fp_inf>:
 a7c:	97 f9       	bld	r25, 7
 a7e:	9f 67       	ori	r25, 0x7F	; 127
 a80:	80 e8       	ldi	r24, 0x80	; 128
 a82:	70 e0       	ldi	r23, 0x00	; 0
 a84:	60 e0       	ldi	r22, 0x00	; 0
 a86:	08 95       	ret

00000a88 <__fp_nan>:
 a88:	9f ef       	ldi	r25, 0xFF	; 255
 a8a:	80 ec       	ldi	r24, 0xC0	; 192
 a8c:	08 95       	ret

00000a8e <__fp_pscA>:
 a8e:	00 24       	eor	r0, r0
 a90:	0a 94       	dec	r0
 a92:	16 16       	cp	r1, r22
 a94:	17 06       	cpc	r1, r23
 a96:	18 06       	cpc	r1, r24
 a98:	09 06       	cpc	r0, r25
 a9a:	08 95       	ret

00000a9c <__fp_pscB>:
 a9c:	00 24       	eor	r0, r0
 a9e:	0a 94       	dec	r0
 aa0:	12 16       	cp	r1, r18
 aa2:	13 06       	cpc	r1, r19
 aa4:	14 06       	cpc	r1, r20
 aa6:	05 06       	cpc	r0, r21
 aa8:	08 95       	ret

00000aaa <__fp_round>:
 aaa:	09 2e       	mov	r0, r25
 aac:	03 94       	inc	r0
 aae:	00 0c       	add	r0, r0
 ab0:	11 f4       	brne	.+4      	; 0xab6 <__fp_round+0xc>
 ab2:	88 23       	and	r24, r24
 ab4:	52 f0       	brmi	.+20     	; 0xaca <__fp_round+0x20>
 ab6:	bb 0f       	add	r27, r27
 ab8:	40 f4       	brcc	.+16     	; 0xaca <__fp_round+0x20>
 aba:	bf 2b       	or	r27, r31
 abc:	11 f4       	brne	.+4      	; 0xac2 <__fp_round+0x18>
 abe:	60 ff       	sbrs	r22, 0
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <__fp_round+0x20>
 ac2:	6f 5f       	subi	r22, 0xFF	; 255
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	08 95       	ret

00000acc <__fp_split3>:
 acc:	57 fd       	sbrc	r21, 7
 ace:	90 58       	subi	r25, 0x80	; 128
 ad0:	44 0f       	add	r20, r20
 ad2:	55 1f       	adc	r21, r21
 ad4:	59 f0       	breq	.+22     	; 0xaec <__fp_splitA+0x10>
 ad6:	5f 3f       	cpi	r21, 0xFF	; 255
 ad8:	71 f0       	breq	.+28     	; 0xaf6 <__fp_splitA+0x1a>
 ada:	47 95       	ror	r20

00000adc <__fp_splitA>:
 adc:	88 0f       	add	r24, r24
 ade:	97 fb       	bst	r25, 7
 ae0:	99 1f       	adc	r25, r25
 ae2:	61 f0       	breq	.+24     	; 0xafc <__fp_splitA+0x20>
 ae4:	9f 3f       	cpi	r25, 0xFF	; 255
 ae6:	79 f0       	breq	.+30     	; 0xb06 <__fp_splitA+0x2a>
 ae8:	87 95       	ror	r24
 aea:	08 95       	ret
 aec:	12 16       	cp	r1, r18
 aee:	13 06       	cpc	r1, r19
 af0:	14 06       	cpc	r1, r20
 af2:	55 1f       	adc	r21, r21
 af4:	f2 cf       	rjmp	.-28     	; 0xada <__fp_split3+0xe>
 af6:	46 95       	lsr	r20
 af8:	f1 df       	rcall	.-30     	; 0xadc <__fp_splitA>
 afa:	08 c0       	rjmp	.+16     	; 0xb0c <__fp_splitA+0x30>
 afc:	16 16       	cp	r1, r22
 afe:	17 06       	cpc	r1, r23
 b00:	18 06       	cpc	r1, r24
 b02:	99 1f       	adc	r25, r25
 b04:	f1 cf       	rjmp	.-30     	; 0xae8 <__fp_splitA+0xc>
 b06:	86 95       	lsr	r24
 b08:	71 05       	cpc	r23, r1
 b0a:	61 05       	cpc	r22, r1
 b0c:	08 94       	sec
 b0e:	08 95       	ret

00000b10 <__fp_zero>:
 b10:	e8 94       	clt

00000b12 <__fp_szero>:
 b12:	bb 27       	eor	r27, r27
 b14:	66 27       	eor	r22, r22
 b16:	77 27       	eor	r23, r23
 b18:	cb 01       	movw	r24, r22
 b1a:	97 f9       	bld	r25, 7
 b1c:	08 95       	ret

00000b1e <__gesf2>:
 b1e:	8a df       	rcall	.-236    	; 0xa34 <__fp_cmp>
 b20:	08 f4       	brcc	.+2      	; 0xb24 <__gesf2+0x6>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	08 95       	ret

00000b26 <__mulsf3>:
 b26:	0b d0       	rcall	.+22     	; 0xb3e <__mulsf3x>
 b28:	c0 cf       	rjmp	.-128    	; 0xaaa <__fp_round>
 b2a:	b1 df       	rcall	.-158    	; 0xa8e <__fp_pscA>
 b2c:	28 f0       	brcs	.+10     	; 0xb38 <__mulsf3+0x12>
 b2e:	b6 df       	rcall	.-148    	; 0xa9c <__fp_pscB>
 b30:	18 f0       	brcs	.+6      	; 0xb38 <__mulsf3+0x12>
 b32:	95 23       	and	r25, r21
 b34:	09 f0       	breq	.+2      	; 0xb38 <__mulsf3+0x12>
 b36:	a2 cf       	rjmp	.-188    	; 0xa7c <__fp_inf>
 b38:	a7 cf       	rjmp	.-178    	; 0xa88 <__fp_nan>
 b3a:	11 24       	eor	r1, r1
 b3c:	ea cf       	rjmp	.-44     	; 0xb12 <__fp_szero>

00000b3e <__mulsf3x>:
 b3e:	c6 df       	rcall	.-116    	; 0xacc <__fp_split3>
 b40:	a0 f3       	brcs	.-24     	; 0xb2a <__mulsf3+0x4>

00000b42 <__mulsf3_pse>:
 b42:	95 9f       	mul	r25, r21
 b44:	d1 f3       	breq	.-12     	; 0xb3a <__mulsf3+0x14>
 b46:	95 0f       	add	r25, r21
 b48:	50 e0       	ldi	r21, 0x00	; 0
 b4a:	55 1f       	adc	r21, r21
 b4c:	62 9f       	mul	r22, r18
 b4e:	f0 01       	movw	r30, r0
 b50:	72 9f       	mul	r23, r18
 b52:	bb 27       	eor	r27, r27
 b54:	f0 0d       	add	r31, r0
 b56:	b1 1d       	adc	r27, r1
 b58:	63 9f       	mul	r22, r19
 b5a:	aa 27       	eor	r26, r26
 b5c:	f0 0d       	add	r31, r0
 b5e:	b1 1d       	adc	r27, r1
 b60:	aa 1f       	adc	r26, r26
 b62:	64 9f       	mul	r22, r20
 b64:	66 27       	eor	r22, r22
 b66:	b0 0d       	add	r27, r0
 b68:	a1 1d       	adc	r26, r1
 b6a:	66 1f       	adc	r22, r22
 b6c:	82 9f       	mul	r24, r18
 b6e:	22 27       	eor	r18, r18
 b70:	b0 0d       	add	r27, r0
 b72:	a1 1d       	adc	r26, r1
 b74:	62 1f       	adc	r22, r18
 b76:	73 9f       	mul	r23, r19
 b78:	b0 0d       	add	r27, r0
 b7a:	a1 1d       	adc	r26, r1
 b7c:	62 1f       	adc	r22, r18
 b7e:	83 9f       	mul	r24, r19
 b80:	a0 0d       	add	r26, r0
 b82:	61 1d       	adc	r22, r1
 b84:	22 1f       	adc	r18, r18
 b86:	74 9f       	mul	r23, r20
 b88:	33 27       	eor	r19, r19
 b8a:	a0 0d       	add	r26, r0
 b8c:	61 1d       	adc	r22, r1
 b8e:	23 1f       	adc	r18, r19
 b90:	84 9f       	mul	r24, r20
 b92:	60 0d       	add	r22, r0
 b94:	21 1d       	adc	r18, r1
 b96:	82 2f       	mov	r24, r18
 b98:	76 2f       	mov	r23, r22
 b9a:	6a 2f       	mov	r22, r26
 b9c:	11 24       	eor	r1, r1
 b9e:	9f 57       	subi	r25, 0x7F	; 127
 ba0:	50 40       	sbci	r21, 0x00	; 0
 ba2:	8a f0       	brmi	.+34     	; 0xbc6 <__mulsf3_pse+0x84>
 ba4:	e1 f0       	breq	.+56     	; 0xbde <__mulsf3_pse+0x9c>
 ba6:	88 23       	and	r24, r24
 ba8:	4a f0       	brmi	.+18     	; 0xbbc <__mulsf3_pse+0x7a>
 baa:	ee 0f       	add	r30, r30
 bac:	ff 1f       	adc	r31, r31
 bae:	bb 1f       	adc	r27, r27
 bb0:	66 1f       	adc	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	91 50       	subi	r25, 0x01	; 1
 bb8:	50 40       	sbci	r21, 0x00	; 0
 bba:	a9 f7       	brne	.-22     	; 0xba6 <__mulsf3_pse+0x64>
 bbc:	9e 3f       	cpi	r25, 0xFE	; 254
 bbe:	51 05       	cpc	r21, r1
 bc0:	70 f0       	brcs	.+28     	; 0xbde <__mulsf3_pse+0x9c>
 bc2:	5c cf       	rjmp	.-328    	; 0xa7c <__fp_inf>
 bc4:	a6 cf       	rjmp	.-180    	; 0xb12 <__fp_szero>
 bc6:	5f 3f       	cpi	r21, 0xFF	; 255
 bc8:	ec f3       	brlt	.-6      	; 0xbc4 <__mulsf3_pse+0x82>
 bca:	98 3e       	cpi	r25, 0xE8	; 232
 bcc:	dc f3       	brlt	.-10     	; 0xbc4 <__mulsf3_pse+0x82>
 bce:	86 95       	lsr	r24
 bd0:	77 95       	ror	r23
 bd2:	67 95       	ror	r22
 bd4:	b7 95       	ror	r27
 bd6:	f7 95       	ror	r31
 bd8:	e7 95       	ror	r30
 bda:	9f 5f       	subi	r25, 0xFF	; 255
 bdc:	c1 f7       	brne	.-16     	; 0xbce <__mulsf3_pse+0x8c>
 bde:	fe 2b       	or	r31, r30
 be0:	88 0f       	add	r24, r24
 be2:	91 1d       	adc	r25, r1
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__tablejump2__>:
 bec:	ee 0f       	add	r30, r30
 bee:	ff 1f       	adc	r31, r31
 bf0:	00 24       	eor	r0, r0
 bf2:	00 1c       	adc	r0, r0
 bf4:	0b be       	out	0x3b, r0	; 59
 bf6:	07 90       	elpm	r0, Z+
 bf8:	f6 91       	elpm	r31, Z
 bfa:	e0 2d       	mov	r30, r0
 bfc:	09 94       	ijmp

00000bfe <_exit>:
 bfe:	f8 94       	cli

00000c00 <__stop_program>:
 c00:	ff cf       	rjmp	.-2      	; 0xc00 <__stop_program>
